#include <GLFW/glfw3.h>
#include <cstring>
#include <stdlib.h>		  // srand, rand
#include <thread>         // std::this_thread::sleep_for
#include <chrono>         // std::chrono::seconds
#include "math.h"

const int width = 640;
const int height = 480;
double xpos, ypos, f;

float* pixels = new float[width*height * 3];

void drawPixel(const int& i, const int& j, const float& red, const float& green, const float& blue)
{
	pixels[(i + width* j) * 3 + 0] = red;
	pixels[(i + width* j) * 3 + 1] = green;
	pixels[(i + width* j) * 3 + 2] = blue;
}
void drawLine(const int& i0, const int& j0, const int& i1, const int& j1, const float& red, const float& green, const float& blue)
{
	for (int i = i0; i <= i1; i++)
	{
		const int j = (j1 - j0)*(i - i0) / (i1 - i0) + j0;

		drawPixel(i, j, red, green, blue);
	}
}
void drawBoldLine(const int& i0, const int& j0, const int& i1, const int& j1, const float& red, const float& green, const float& blue)
{
	for (int i = i0; i <= i1; i++)
	{
		const int j = (j1 - j0)*(i - i0) / (i1 - i0) + j0;

		drawPixel(i, j, red, green, blue);
		drawPixel(i + 1, j, red, green, blue);
		drawPixel(i, j + 1, red, green, blue);
	}
}
void drawSq(const int& i0, const int& j0, const int& length, const float& red, const float& green, const float& blue)
{
	for (int i = i0; i <= (i0 + length); i++)
	{
		int j = j0;
		drawPixel(i, j, red, green, blue);
		j = j0 + length;
		drawPixel(i, j, red, green, blue);
	}
	for (int j = j0; j <= (j0 + length); j++)
	{
		int i = i0;
		drawPixel(i, j, red, green, blue);
		i = i0 + length;
		drawPixel(i, j, red, green, blue);
	}
}
void drawCircle(int x0, int y0, int radius, const float& red, const float& green, const float& blue)
{
	int x = radius;
	int y = 0;
	int err = 0;

	while (x >= y)
	{
		drawPixel(x0 + x, y0 + y, red, green, blue);
		drawPixel(x0 + y, y0 + x, red, green, blue);
		drawPixel(x0 - y, y0 + x, red, green, blue);
		drawPixel(x0 - x, y0 + y, red, green, blue);
		drawPixel(x0 - x, y0 - y, red, green, blue);
		drawPixel(x0 - y, y0 - x, red, green, blue);
		drawPixel(x0 + y, y0 - x, red, green, blue);
		drawPixel(x0 + x, y0 - y, red, green, blue);
		//
		drawPixel(x0 + x + 1, y0 + y + 1, red, green, blue);
		drawPixel(x0 + y + 1, y0 + x + 1, red, green, blue);
		drawPixel(x0 + x + 1, y0 + y, red, green, blue);
		drawPixel(x0 + y + 1, y0 + x, red, green, blue);
		drawPixel(x0 + x, y0 + y + 1, red, green, blue);
		drawPixel(x0 + y, y0 + x + 1, red, green, blue);
		//
		drawPixel(x0 - y - 1, y0 + x + 1, red, green, blue);
		drawPixel(x0 - x - 1, y0 + y + 1, red, green, blue);
		drawPixel(x0 - y - 1, y0 + x, red, green, blue);
		drawPixel(x0 - x - 1, y0 + y, red, green, blue);
		drawPixel(x0 - y, y0 + x + 1, red, green, blue);
		drawPixel(x0 - x, y0 + y + 1, red, green, blue);
		//
		drawPixel(x0 - x - 1, y0 - y - 1, red, green, blue);
		drawPixel(x0 - y - 1, y0 - x - 1, red, green, green);
		drawPixel(x0 - x-1, y0 - y, red, green, blue);
		drawPixel(x0 - y-1, y0 - x, red, green, blue);
		drawPixel(x0 - x, y0 - y-1, red, green, blue);
		drawPixel(x0 - y, y0 - x-1, red, green, blue);
		//
		drawPixel(x0 + y + 1, y0 - x - 1, red, green, blue);
		drawPixel(x0 + x + 1, y0 - y - 1, red, green, blue);
		drawPixel(x0 + y + 1, y0 - x, red, green, blue);
		drawPixel(x0 + x + 1, y0 - y, red, green, blue);
		drawPixel(x0 + y, y0 - x - 1, red, green, blue);
		drawPixel(x0 + x, y0 - y - 1, red, green, blue);


		y += 1;
		err += 1 + 2 * y;
		if (2 * (err - x) + 1 > 0)
		{
			x -= 1;
			err += 1 - 2 * x;
		}
	}
}
	


void drawOnPixelBuffer()
{
	//std::memset(pixels, 1.0f, sizeof(float)*width*height * 3); // doesn't work
	std::fill_n(pixels, width*height * 3, 1.0f);	// white background

													//for (int i = 0; i<width*height; i++) {
													//	pixels[i * 3 + 0] = 1.0f; // red 
													//	pixels[i * 3 + 1] = 1.0f; // green
													//	pixels[i * 3 + 2] = 1.0f; // blue
													//}

	const int i = rand() % width, j = rand() % height;
	drawPixel(i, j, 0.0f, 0.0f, 0.0f);
	drawCircle(64, 120, 30, 1.0f, 0.0f, 0.0f);
	drawLine(34, 330, 94, 390, 1.0f, 0.0f, 0.0f);
	drawLine(34, 390, 94, 330, 1.0f, 0.0f, 0.0f);
	drawBoldLine(162, 390, 222, 330, 1.0f, 0.0f, 0.0f);
	drawSq(290, 330, 60, 1.0f, 0.0f, 0.0f);
	drawLine(418, 360, 478, 360, 1.0f, 0.0f, 0.0f);	
	drawCircle(576, 360, 40, 1.0f, 0.0f, 0.0f);
	drawBoldLine(162, 90, 222, 150, 1.0f, 0.0f, 0.0f);
	drawSq(300, 100, 40, 1.0f, 0.0f, 0.0f);
	drawLine(418, 140, 478, 100, 1.0f, 0.0f, 0.0f);
	drawLine(536, 100, 616, 140, 1.0f, 0.0f, 0.0f);
	// drawing a line
	//TODO: anti-aliasing
	for (int i = 64; i < 640; i += 128)
	{
		for (int j = 120; j < 480; j += 240)
		{
			drawCircle(i, j, 50, 1.0f, 0.0f, 0.0f);
			f = (xpos - i)*(xpos - i) + ((480-ypos) - j)*((480 - ypos) - j) - 2500;
			if (f < 0.0f)
			{
				drawCircle(i, j, 50, 0.0f, 0.0f, 1.0f);
			}
		}
	}

	//TODO: try moving object
}

int main(void)
{
	GLFWwindow* window;

	/* Initialize the library */
	if (!glfwInit())
		return -1;

	/* Create a windowed mode window and its OpenGL context */
	window = glfwCreateWindow(width, height, "Week4", NULL, NULL);
	if (!window)
	{
		glfwTerminate();
		return -1;
	}

	/* Make the window's context current */
	glfwMakeContextCurrent(window);
	glClearColor(1, 1, 1, 1); // while background

							  /* Loop until the user closes the window */
	while (!glfwWindowShouldClose(window))
	{
		glfwGetCursorPos(window, &xpos, &ypos);
		/* Render here */
		//glClear(GL_COLOR_BUFFER_BIT);

		drawOnPixelBuffer();

		//TODO: RGB struct
		//Make a pixel drawing function
		//Make a line drawing function

		glDrawPixels(width, height, GL_RGB, GL_FLOAT, pixels);

		/* Swap front and back buffers */
		glfwSwapBuffers(window);

		/* Poll for and process events */
		glfwPollEvents();

		std::this_thread::sleep_for(std::chrono::milliseconds(100));
	}

	glfwTerminate();

	delete[] pixels; // or you may reuse pixels array 

	return 0;
}
